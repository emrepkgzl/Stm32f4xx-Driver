
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000968  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000b10  08000b10  00010b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b20  08000b20  00010b28  2**0
                  CONTENTS
  4 .ARM          00000000  08000b20  08000b20  00010b28  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b20  08000b28  00010b28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b20  08000b20  00010b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b24  08000b24  00010b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010b28  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010b28  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001178  00000000  00000000  00010b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003d7  00000000  00000000  00011cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000128  00000000  00000000  000120a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000f0  00000000  00000000  000121d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000202c  00000000  00000000  000122c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000015ad  00000000  00000000  000142ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008fbf  00000000  00000000  00015899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001e858  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003e0  00000000  00000000  0001e8a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000af8 	.word	0x08000af8

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000af8 	.word	0x08000af8

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <SPI2_GPIOInits>:

#include "stm32f407xx.h"
#include <String.h>

void SPI2_GPIOInits(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80001fe:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <SPI2_GPIOInits+0x40>)
 8000200:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000202:	2302      	movs	r3, #2
 8000204:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000206:	2305      	movs	r3, #5
 8000208:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800020a:	2300      	movs	r3, #0
 800020c:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PULL_NONE;
 800020e:	2300      	movs	r3, #0
 8000210:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HS;
 8000212:	2302      	movs	r3, #2
 8000214:	72bb      	strb	r3, [r7, #10]

	/* SCLK init */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000216:	230d      	movs	r3, #13
 8000218:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f000 f969 	bl	80004f4 <GPIO_Init>

	/* MOSI init */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000222:	230f      	movs	r3, #15
 8000224:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f963 	bl	80004f4 <GPIO_Init>
	//GPIO_Init(&SPIPins);

	/* NSS init */
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	//GPIO_Init(&SPIPins);
}
 800022e:	bf00      	nop
 8000230:	3710      	adds	r7, #16
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40020400 	.word	0x40020400

0800023c <SPI2_Inits>:

void SPI2_Inits(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 8000242:	4b0d      	ldr	r3, [pc, #52]	; (8000278 <SPI2_Inits+0x3c>)
 8000244:	607b      	str	r3, [r7, #4]
	SPI2Handle.SPI_Config.SPI_BusConfig = SPI_BUS_CFG_FD;
 8000246:	2301      	movs	r3, #1
 8000248:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800024a:	2301      	movs	r3, #1
 800024c:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPI_Config.SPI_SclkSpeed = SPI_SCLK_SPEED_PCLK_DIV_256;
 800024e:	2307      	movs	r3, #7
 8000250:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
 8000252:	2300      	movs	r3, #0
 8000254:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 8000256:	2300      	movs	r3, #0
 8000258:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 800025a:	2300      	movs	r3, #0
 800025c:	733b      	strb	r3, [r7, #12]
	SPI2Handle.SPI_Config.SPI_SSI = SPI_SSI_EN;
 800025e:	2301      	movs	r3, #1
 8000260:	73fb      	strb	r3, [r7, #15]
	SPI2Handle.SPI_Config.SPI_SSM = SPI_SSM_EN;
 8000262:	2301      	movs	r3, #1
 8000264:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2Handle);
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	4618      	mov	r0, r3
 800026a:	f000 fb6d 	bl	8000948 <SPI_Init>
}
 800026e:	bf00      	nop
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40003800 	.word	0x40003800

0800027c <main>:

int main(void)
{
 800027c:	b590      	push	{r4, r7, lr}
 800027e:	b085      	sub	sp, #20
 8000280:	af00      	add	r7, sp, #0
	char message[] = "Hello World!";
 8000282:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <main+0x4c>)
 8000284:	463c      	mov	r4, r7
 8000286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000288:	c407      	stmia	r4!, {r0, r1, r2}
 800028a:	7023      	strb	r3, [r4, #0]

	/* this function will be used to initialize GPIO pins to behave as SPI2 pins */
	SPI2_GPIOInits();
 800028c:	f7ff ffb4 	bl	80001f8 <SPI2_GPIOInits>

	/* this function will be used to initialize SPI2 peripheral parameters */
	SPI2_Inits();
 8000290:	f7ff ffd4 	bl	800023c <SPI2_Inits>

	/* enable the SPI2 peripheral after configurations */
	SPI_PeripheralControl(SPI2, ENABLE);
 8000294:	2101      	movs	r1, #1
 8000296:	480d      	ldr	r0, [pc, #52]	; (80002cc <main+0x50>)
 8000298:	f000 fbed 	bl	8000a76 <SPI_PeripheralControl>

	SPI_SendData(SPI2, (uint8_t*)message, strlen(message));
 800029c:	463b      	mov	r3, r7
 800029e:	4618      	mov	r0, r3
 80002a0:	f7ff ffa2 	bl	80001e8 <strlen>
 80002a4:	4602      	mov	r2, r0
 80002a6:	463b      	mov	r3, r7
 80002a8:	4619      	mov	r1, r3
 80002aa:	4808      	ldr	r0, [pc, #32]	; (80002cc <main+0x50>)
 80002ac:	f000 fbae 	bl	8000a0c <SPI_SendData>

	while(1)
	{
		SPI_SendData(SPI2, (uint8_t*)message, strlen(message));
 80002b0:	463b      	mov	r3, r7
 80002b2:	4618      	mov	r0, r3
 80002b4:	f7ff ff98 	bl	80001e8 <strlen>
 80002b8:	4602      	mov	r2, r0
 80002ba:	463b      	mov	r3, r7
 80002bc:	4619      	mov	r1, r3
 80002be:	4803      	ldr	r0, [pc, #12]	; (80002cc <main+0x50>)
 80002c0:	f000 fba4 	bl	8000a0c <SPI_SendData>
 80002c4:	e7f4      	b.n	80002b0 <main+0x34>
 80002c6:	bf00      	nop
 80002c8:	08000b10 	.word	0x08000b10
 80002cc:	40003800 	.word	0x40003800

080002d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d0:	480d      	ldr	r0, [pc, #52]	; (8000308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480c      	ldr	r0, [pc, #48]	; (800030c <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490d      	ldr	r1, [pc, #52]	; (8000310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0a      	ldr	r4, [pc, #40]	; (800031c <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fe:	f000 fbd7 	bl	8000ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000302:	f7ff ffbb 	bl	800027c <main>

08000306 <LoopForever>:

LoopForever:
  b LoopForever
 8000306:	e7fe      	b.n	8000306 <LoopForever>
  ldr   r0, =_estack
 8000308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800030c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000310:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000314:	08000b28 	.word	0x08000b28
  ldr r2, =_sbss
 8000318:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800031c:	2000001c 	.word	0x2000001c

08000320 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000320:	e7fe      	b.n	8000320 <ADC_IRQHandler>
	...

08000324 <GPIO_PeriClockControl>:
 *
 * 	@note	:	none
 * 	@date	:	07/19/23
 **********************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi)
 8000330:	78fb      	ldrb	r3, [r7, #3]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d062      	beq.n	80003fc <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a64      	ldr	r2, [pc, #400]	; (80004cc <GPIO_PeriClockControl+0x1a8>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d106      	bne.n	800034c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800033e:	4b64      	ldr	r3, [pc, #400]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 8000340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000342:	4a63      	ldr	r2, [pc, #396]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 800034a:	e0b9      	b.n	80004c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a61      	ldr	r2, [pc, #388]	; (80004d4 <GPIO_PeriClockControl+0x1b0>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d106      	bne.n	8000362 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000354:	4b5e      	ldr	r3, [pc, #376]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 8000356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000358:	4a5d      	ldr	r2, [pc, #372]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 800035a:	f043 0302 	orr.w	r3, r3, #2
 800035e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000360:	e0ae      	b.n	80004c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a5c      	ldr	r2, [pc, #368]	; (80004d8 <GPIO_PeriClockControl+0x1b4>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d106      	bne.n	8000378 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800036a:	4b59      	ldr	r3, [pc, #356]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036e:	4a58      	ldr	r2, [pc, #352]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 8000370:	f043 0304 	orr.w	r3, r3, #4
 8000374:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000376:	e0a3      	b.n	80004c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a58      	ldr	r2, [pc, #352]	; (80004dc <GPIO_PeriClockControl+0x1b8>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d106      	bne.n	800038e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000380:	4b53      	ldr	r3, [pc, #332]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000384:	4a52      	ldr	r2, [pc, #328]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 8000386:	f043 0308 	orr.w	r3, r3, #8
 800038a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038c:	e098      	b.n	80004c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a53      	ldr	r2, [pc, #332]	; (80004e0 <GPIO_PeriClockControl+0x1bc>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d106      	bne.n	80003a4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000396:	4b4e      	ldr	r3, [pc, #312]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039a:	4a4d      	ldr	r2, [pc, #308]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 800039c:	f043 0310 	orr.w	r3, r3, #16
 80003a0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a2:	e08d      	b.n	80004c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a4f      	ldr	r2, [pc, #316]	; (80004e4 <GPIO_PeriClockControl+0x1c0>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d106      	bne.n	80003ba <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003ac:	4b48      	ldr	r3, [pc, #288]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b0:	4a47      	ldr	r2, [pc, #284]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 80003b2:	f043 0320 	orr.w	r3, r3, #32
 80003b6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b8:	e082      	b.n	80004c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a4a      	ldr	r2, [pc, #296]	; (80004e8 <GPIO_PeriClockControl+0x1c4>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003c2:	4b43      	ldr	r3, [pc, #268]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c6:	4a42      	ldr	r2, [pc, #264]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 80003c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003cc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ce:	e077      	b.n	80004c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a46      	ldr	r2, [pc, #280]	; (80004ec <GPIO_PeriClockControl+0x1c8>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003d8:	4b3d      	ldr	r3, [pc, #244]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003dc:	4a3c      	ldr	r2, [pc, #240]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 80003de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003e2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e4:	e06c      	b.n	80004c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a41      	ldr	r2, [pc, #260]	; (80004f0 <GPIO_PeriClockControl+0x1cc>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d168      	bne.n	80004c0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80003ee:	4b38      	ldr	r3, [pc, #224]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f2:	4a37      	ldr	r2, [pc, #220]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 80003f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fa:	e061      	b.n	80004c0 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a33      	ldr	r2, [pc, #204]	; (80004cc <GPIO_PeriClockControl+0x1a8>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d106      	bne.n	8000412 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 8000404:	4b32      	ldr	r3, [pc, #200]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000408:	4a31      	ldr	r2, [pc, #196]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 800040a:	f023 0301 	bic.w	r3, r3, #1
 800040e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000410:	e056      	b.n	80004c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4a2f      	ldr	r2, [pc, #188]	; (80004d4 <GPIO_PeriClockControl+0x1b0>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d106      	bne.n	8000428 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 800041a:	4b2d      	ldr	r3, [pc, #180]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 800041c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800041e:	4a2c      	ldr	r2, [pc, #176]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 8000420:	f023 0302 	bic.w	r3, r3, #2
 8000424:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000426:	e04b      	b.n	80004c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	4a2b      	ldr	r2, [pc, #172]	; (80004d8 <GPIO_PeriClockControl+0x1b4>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d106      	bne.n	800043e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000430:	4b27      	ldr	r3, [pc, #156]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 8000432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000434:	4a26      	ldr	r2, [pc, #152]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 8000436:	f023 0304 	bic.w	r3, r3, #4
 800043a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043c:	e040      	b.n	80004c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4a26      	ldr	r2, [pc, #152]	; (80004dc <GPIO_PeriClockControl+0x1b8>)
 8000442:	4293      	cmp	r3, r2
 8000444:	d106      	bne.n	8000454 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 8000446:	4b22      	ldr	r3, [pc, #136]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 8000448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044a:	4a21      	ldr	r2, [pc, #132]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 800044c:	f023 0308 	bic.w	r3, r3, #8
 8000450:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000452:	e035      	b.n	80004c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4a22      	ldr	r2, [pc, #136]	; (80004e0 <GPIO_PeriClockControl+0x1bc>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d106      	bne.n	800046a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 800045c:	4b1c      	ldr	r3, [pc, #112]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000460:	4a1b      	ldr	r2, [pc, #108]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 8000462:	f023 0310 	bic.w	r3, r3, #16
 8000466:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000468:	e02a      	b.n	80004c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	4a1d      	ldr	r2, [pc, #116]	; (80004e4 <GPIO_PeriClockControl+0x1c0>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d106      	bne.n	8000480 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000472:	4b17      	ldr	r3, [pc, #92]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 8000474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000476:	4a16      	ldr	r2, [pc, #88]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 8000478:	f023 0320 	bic.w	r3, r3, #32
 800047c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800047e:	e01f      	b.n	80004c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a19      	ldr	r2, [pc, #100]	; (80004e8 <GPIO_PeriClockControl+0x1c4>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d106      	bne.n	8000496 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048c:	4a10      	ldr	r2, [pc, #64]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 800048e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000492:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000494:	e014      	b.n	80004c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	4a14      	ldr	r2, [pc, #80]	; (80004ec <GPIO_PeriClockControl+0x1c8>)
 800049a:	4293      	cmp	r3, r2
 800049c:	d106      	bne.n	80004ac <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 80004a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a2:	4a0b      	ldr	r2, [pc, #44]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 80004a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004aa:	e009      	b.n	80004c0 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4a10      	ldr	r2, [pc, #64]	; (80004f0 <GPIO_PeriClockControl+0x1cc>)
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d105      	bne.n	80004c0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 80004b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b8:	4a05      	ldr	r2, [pc, #20]	; (80004d0 <GPIO_PeriClockControl+0x1ac>)
 80004ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c0:	bf00      	nop
 80004c2:	370c      	adds	r7, #12
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	40020000 	.word	0x40020000
 80004d0:	40023800 	.word	0x40023800
 80004d4:	40020400 	.word	0x40020400
 80004d8:	40020800 	.word	0x40020800
 80004dc:	40020c00 	.word	0x40020c00
 80004e0:	40021000 	.word	0x40021000
 80004e4:	40021400 	.word	0x40021400
 80004e8:	40021800 	.word	0x40021800
 80004ec:	40021c00 	.word	0x40021c00
 80004f0:	40022000 	.word	0x40022000

080004f4 <GPIO_Init>:
 *
 * 	@note	:	none
 * 	@date	:	07/19/23
 **********************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]

	/* Enable peripheral clock */
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2101      	movs	r1, #1
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff ff0c 	bl	8000324 <GPIO_PeriClockControl>

	/* 1. configure the mode of GPIO pin */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	795b      	ldrb	r3, [r3, #5]
 8000510:	2b03      	cmp	r3, #3
 8000512:	d820      	bhi.n	8000556 <GPIO_Init+0x62>
	{
		/* non interrupt mode */
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	795b      	ldrb	r3, [r3, #5]
 8000518:	461a      	mov	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	fa02 f303 	lsl.w	r3, r2, r3
 8000524:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	791b      	ldrb	r3, [r3, #4]
 8000530:	005b      	lsls	r3, r3, #1
 8000532:	2103      	movs	r1, #3
 8000534:	fa01 f303 	lsl.w	r3, r1, r3
 8000538:	43db      	mvns	r3, r3
 800053a:	4619      	mov	r1, r3
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	400a      	ands	r2, r1
 8000542:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	6819      	ldr	r1, [r3, #0]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	430a      	orrs	r2, r1
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	e0cb      	b.n	80006ee <GPIO_Init+0x1fa>
	}
	else
	{
		/* interrupt mode */
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	795b      	ldrb	r3, [r3, #5]
 800055a:	2b04      	cmp	r3, #4
 800055c:	d117      	bne.n	800058e <GPIO_Init+0x9a>
		{
			/* 1. enable falling edge detection */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800055e:	4b4e      	ldr	r3, [pc, #312]	; (8000698 <GPIO_Init+0x1a4>)
 8000560:	68db      	ldr	r3, [r3, #12]
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	7912      	ldrb	r2, [r2, #4]
 8000566:	4611      	mov	r1, r2
 8000568:	2201      	movs	r2, #1
 800056a:	408a      	lsls	r2, r1
 800056c:	4611      	mov	r1, r2
 800056e:	4a4a      	ldr	r2, [pc, #296]	; (8000698 <GPIO_Init+0x1a4>)
 8000570:	430b      	orrs	r3, r1
 8000572:	60d3      	str	r3, [r2, #12]
			/* clear RTSR */
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000574:	4b48      	ldr	r3, [pc, #288]	; (8000698 <GPIO_Init+0x1a4>)
 8000576:	689b      	ldr	r3, [r3, #8]
 8000578:	687a      	ldr	r2, [r7, #4]
 800057a:	7912      	ldrb	r2, [r2, #4]
 800057c:	4611      	mov	r1, r2
 800057e:	2201      	movs	r2, #1
 8000580:	408a      	lsls	r2, r1
 8000582:	43d2      	mvns	r2, r2
 8000584:	4611      	mov	r1, r2
 8000586:	4a44      	ldr	r2, [pc, #272]	; (8000698 <GPIO_Init+0x1a4>)
 8000588:	400b      	ands	r3, r1
 800058a:	6093      	str	r3, [r2, #8]
 800058c:	e035      	b.n	80005fa <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	795b      	ldrb	r3, [r3, #5]
 8000592:	2b05      	cmp	r3, #5
 8000594:	d117      	bne.n	80005c6 <GPIO_Init+0xd2>
		{
			/* 1. enable rising edge detection */
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000596:	4b40      	ldr	r3, [pc, #256]	; (8000698 <GPIO_Init+0x1a4>)
 8000598:	689b      	ldr	r3, [r3, #8]
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	7912      	ldrb	r2, [r2, #4]
 800059e:	4611      	mov	r1, r2
 80005a0:	2201      	movs	r2, #1
 80005a2:	408a      	lsls	r2, r1
 80005a4:	4611      	mov	r1, r2
 80005a6:	4a3c      	ldr	r2, [pc, #240]	; (8000698 <GPIO_Init+0x1a4>)
 80005a8:	430b      	orrs	r3, r1
 80005aa:	6093      	str	r3, [r2, #8]
			/* clear FTSR */
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ac:	4b3a      	ldr	r3, [pc, #232]	; (8000698 <GPIO_Init+0x1a4>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	7912      	ldrb	r2, [r2, #4]
 80005b4:	4611      	mov	r1, r2
 80005b6:	2201      	movs	r2, #1
 80005b8:	408a      	lsls	r2, r1
 80005ba:	43d2      	mvns	r2, r2
 80005bc:	4611      	mov	r1, r2
 80005be:	4a36      	ldr	r2, [pc, #216]	; (8000698 <GPIO_Init+0x1a4>)
 80005c0:	400b      	ands	r3, r1
 80005c2:	60d3      	str	r3, [r2, #12]
 80005c4:	e019      	b.n	80005fa <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	795b      	ldrb	r3, [r3, #5]
 80005ca:	2b06      	cmp	r3, #6
 80005cc:	d115      	bne.n	80005fa <GPIO_Init+0x106>
		{
			/* 1. enable both falling edge and rising edge detection */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ce:	4b32      	ldr	r3, [pc, #200]	; (8000698 <GPIO_Init+0x1a4>)
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	7912      	ldrb	r2, [r2, #4]
 80005d6:	4611      	mov	r1, r2
 80005d8:	2201      	movs	r2, #1
 80005da:	408a      	lsls	r2, r1
 80005dc:	4611      	mov	r1, r2
 80005de:	4a2e      	ldr	r2, [pc, #184]	; (8000698 <GPIO_Init+0x1a4>)
 80005e0:	430b      	orrs	r3, r1
 80005e2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e4:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <GPIO_Init+0x1a4>)
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	7912      	ldrb	r2, [r2, #4]
 80005ec:	4611      	mov	r1, r2
 80005ee:	2201      	movs	r2, #1
 80005f0:	408a      	lsls	r2, r1
 80005f2:	4611      	mov	r1, r2
 80005f4:	4a28      	ldr	r2, [pc, #160]	; (8000698 <GPIO_Init+0x1a4>)
 80005f6:	430b      	orrs	r3, r1
 80005f8:	6093      	str	r3, [r2, #8]
		}

		/* 2. configure the GPIO port selection in SYSCFG_EXTICR */
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	791b      	ldrb	r3, [r3, #4]
 80005fe:	089b      	lsrs	r3, r3, #2
 8000600:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) * 4;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	791b      	ldrb	r3, [r3, #4]
 8000606:	f003 0303 	and.w	r3, r3, #3
 800060a:	b2db      	uxtb	r3, r3
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	72bb      	strb	r3, [r7, #10]
		SYSCFG_PCLK_EN();
 8000610:	4b22      	ldr	r3, [pc, #136]	; (800069c <GPIO_Init+0x1a8>)
 8000612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000614:	4a21      	ldr	r2, [pc, #132]	; (800069c <GPIO_Init+0x1a8>)
 8000616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx) << temp2);
 800061c:	4a20      	ldr	r2, [pc, #128]	; (80006a0 <GPIO_Init+0x1ac>)
 800061e:	7afb      	ldrb	r3, [r7, #11]
 8000620:	3302      	adds	r3, #2
 8000622:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	491e      	ldr	r1, [pc, #120]	; (80006a4 <GPIO_Init+0x1b0>)
 800062c:	428b      	cmp	r3, r1
 800062e:	d049      	beq.n	80006c4 <GPIO_Init+0x1d0>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	491c      	ldr	r1, [pc, #112]	; (80006a8 <GPIO_Init+0x1b4>)
 8000636:	428b      	cmp	r3, r1
 8000638:	d02b      	beq.n	8000692 <GPIO_Init+0x19e>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	491b      	ldr	r1, [pc, #108]	; (80006ac <GPIO_Init+0x1b8>)
 8000640:	428b      	cmp	r3, r1
 8000642:	d024      	beq.n	800068e <GPIO_Init+0x19a>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4919      	ldr	r1, [pc, #100]	; (80006b0 <GPIO_Init+0x1bc>)
 800064a:	428b      	cmp	r3, r1
 800064c:	d01d      	beq.n	800068a <GPIO_Init+0x196>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4918      	ldr	r1, [pc, #96]	; (80006b4 <GPIO_Init+0x1c0>)
 8000654:	428b      	cmp	r3, r1
 8000656:	d016      	beq.n	8000686 <GPIO_Init+0x192>
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4916      	ldr	r1, [pc, #88]	; (80006b8 <GPIO_Init+0x1c4>)
 800065e:	428b      	cmp	r3, r1
 8000660:	d00f      	beq.n	8000682 <GPIO_Init+0x18e>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4915      	ldr	r1, [pc, #84]	; (80006bc <GPIO_Init+0x1c8>)
 8000668:	428b      	cmp	r3, r1
 800066a:	d008      	beq.n	800067e <GPIO_Init+0x18a>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4913      	ldr	r1, [pc, #76]	; (80006c0 <GPIO_Init+0x1cc>)
 8000672:	428b      	cmp	r3, r1
 8000674:	d101      	bne.n	800067a <GPIO_Init+0x186>
 8000676:	2307      	movs	r3, #7
 8000678:	e025      	b.n	80006c6 <GPIO_Init+0x1d2>
 800067a:	2300      	movs	r3, #0
 800067c:	e023      	b.n	80006c6 <GPIO_Init+0x1d2>
 800067e:	2306      	movs	r3, #6
 8000680:	e021      	b.n	80006c6 <GPIO_Init+0x1d2>
 8000682:	2305      	movs	r3, #5
 8000684:	e01f      	b.n	80006c6 <GPIO_Init+0x1d2>
 8000686:	2304      	movs	r3, #4
 8000688:	e01d      	b.n	80006c6 <GPIO_Init+0x1d2>
 800068a:	2303      	movs	r3, #3
 800068c:	e01b      	b.n	80006c6 <GPIO_Init+0x1d2>
 800068e:	2302      	movs	r3, #2
 8000690:	e019      	b.n	80006c6 <GPIO_Init+0x1d2>
 8000692:	2301      	movs	r3, #1
 8000694:	e017      	b.n	80006c6 <GPIO_Init+0x1d2>
 8000696:	bf00      	nop
 8000698:	40013c00 	.word	0x40013c00
 800069c:	40023800 	.word	0x40023800
 80006a0:	40013800 	.word	0x40013800
 80006a4:	40020000 	.word	0x40020000
 80006a8:	40020400 	.word	0x40020400
 80006ac:	40020800 	.word	0x40020800
 80006b0:	40020c00 	.word	0x40020c00
 80006b4:	40021000 	.word	0x40021000
 80006b8:	40021400 	.word	0x40021400
 80006bc:	40021800 	.word	0x40021800
 80006c0:	40021c00 	.word	0x40021c00
 80006c4:	2300      	movs	r3, #0
 80006c6:	7ab9      	ldrb	r1, [r7, #10]
 80006c8:	408b      	lsls	r3, r1
 80006ca:	4618      	mov	r0, r3
 80006cc:	4964      	ldr	r1, [pc, #400]	; (8000860 <GPIO_Init+0x36c>)
 80006ce:	7afb      	ldrb	r3, [r7, #11]
 80006d0:	4302      	orrs	r2, r0
 80006d2:	3302      	adds	r3, #2
 80006d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		/* 3. enable the EXTI interrupt delivery using IMR */
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d8:	4b62      	ldr	r3, [pc, #392]	; (8000864 <GPIO_Init+0x370>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	7912      	ldrb	r2, [r2, #4]
 80006e0:	4611      	mov	r1, r2
 80006e2:	2201      	movs	r2, #1
 80006e4:	408a      	lsls	r2, r1
 80006e6:	4611      	mov	r1, r2
 80006e8:	4a5e      	ldr	r2, [pc, #376]	; (8000864 <GPIO_Init+0x370>)
 80006ea:	430b      	orrs	r3, r1
 80006ec:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]

	/* 2. configure the speed of GPIO pin */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	799b      	ldrb	r3, [r3, #6]
 80006f6:	461a      	mov	r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	791b      	ldrb	r3, [r3, #4]
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000702:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	689a      	ldr	r2, [r3, #8]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	791b      	ldrb	r3, [r3, #4]
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	2103      	movs	r1, #3
 8000712:	fa01 f303 	lsl.w	r3, r1, r3
 8000716:	43db      	mvns	r3, r3
 8000718:	4619      	mov	r1, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	400a      	ands	r2, r1
 8000720:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	6899      	ldr	r1, [r3, #8]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	68fa      	ldr	r2, [r7, #12]
 800072e:	430a      	orrs	r2, r1
 8000730:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]

	/* 3. configure the pull up/down state */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	79db      	ldrb	r3, [r3, #7]
 800073a:	461a      	mov	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	791b      	ldrb	r3, [r3, #4]
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	68da      	ldr	r2, [r3, #12]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	791b      	ldrb	r3, [r3, #4]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	2103      	movs	r1, #3
 8000756:	fa01 f303 	lsl.w	r3, r1, r3
 800075a:	43db      	mvns	r3, r3
 800075c:	4619      	mov	r1, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	400a      	ands	r2, r1
 8000764:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	68d9      	ldr	r1, [r3, #12]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	68fa      	ldr	r2, [r7, #12]
 8000772:	430a      	orrs	r2, r1
 8000774:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]

	/* 4. configure the output type */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	7a1b      	ldrb	r3, [r3, #8]
 800077e:	461a      	mov	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	fa02 f303 	lsl.w	r3, r2, r3
 8000788:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	685a      	ldr	r2, [r3, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	791b      	ldrb	r3, [r3, #4]
 8000794:	4619      	mov	r1, r3
 8000796:	2301      	movs	r3, #1
 8000798:	408b      	lsls	r3, r1
 800079a:	43db      	mvns	r3, r3
 800079c:	4619      	mov	r1, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	400a      	ands	r2, r1
 80007a4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	6859      	ldr	r1, [r3, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	68fa      	ldr	r2, [r7, #12]
 80007b2:	430a      	orrs	r2, r1
 80007b4:	605a      	str	r2, [r3, #4]
	temp = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]

	/* 5. configure the alternate functionality */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	795b      	ldrb	r3, [r3, #5]
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d149      	bne.n	8000856 <GPIO_Init+0x362>
	{
		if((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) < GPIO_PIN_NO_8)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	791b      	ldrb	r3, [r3, #4]
 80007c6:	2b07      	cmp	r3, #7
 80007c8:	d81f      	bhi.n	800080a <GPIO_Init+0x316>
		{
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	7a5b      	ldrb	r3, [r3, #9]
 80007ce:	461a      	mov	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	791b      	ldrb	r3, [r3, #4]
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFRL &= ~(0xF<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	6a1a      	ldr	r2, [r3, #32]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	791b      	ldrb	r3, [r3, #4]
 80007e6:	4619      	mov	r1, r3
 80007e8:	230f      	movs	r3, #15
 80007ea:	408b      	lsls	r3, r1
 80007ec:	43db      	mvns	r3, r3
 80007ee:	4619      	mov	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	400a      	ands	r2, r1
 80007f6:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= temp;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	6a19      	ldr	r1, [r3, #32]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	430a      	orrs	r2, r1
 8000806:	621a      	str	r2, [r3, #32]
 8000808:	e023      	b.n	8000852 <GPIO_Init+0x35e>
		}
		else
		{
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % GPIO_PIN_NO_8)));
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	7a5b      	ldrb	r3, [r3, #9]
 800080e:	461a      	mov	r2, r3
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	791b      	ldrb	r3, [r3, #4]
 8000814:	f003 0307 	and.w	r3, r3, #7
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % GPIO_PIN_NO_8)));
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	791b      	ldrb	r3, [r3, #4]
 800082a:	f003 0307 	and.w	r3, r3, #7
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	210f      	movs	r1, #15
 8000832:	fa01 f303 	lsl.w	r3, r1, r3
 8000836:	43db      	mvns	r3, r3
 8000838:	4619      	mov	r1, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	400a      	ands	r2, r1
 8000840:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFRH |= temp;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	68fa      	ldr	r2, [r7, #12]
 800084e:	430a      	orrs	r2, r1
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
		}
		temp = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
	}
}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40013800 	.word	0x40013800
 8000864:	40013c00 	.word	0x40013c00

08000868 <SPI_PeriClockControl>:
 *
 * 	@note	:	none
 * 	@date	:	07/23/23
 **********************************************************************/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	70fb      	strb	r3, [r7, #3]
	if(EnorDi)
 8000874:	78fb      	ldrb	r3, [r7, #3]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d02b      	beq.n	80008d2 <SPI_PeriClockControl+0x6a>
	{
		if(pSPIx == SPI1)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a2d      	ldr	r2, [pc, #180]	; (8000934 <SPI_PeriClockControl+0xcc>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d106      	bne.n	8000890 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <SPI_PeriClockControl+0xd0>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	4a2c      	ldr	r2, [pc, #176]	; (8000938 <SPI_PeriClockControl+0xd0>)
 8000888:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800088c:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pSPIx == SPI4)
		{
			SPI4_PCLK_DI();
		}
	}
}
 800088e:	e04b      	b.n	8000928 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a2a      	ldr	r2, [pc, #168]	; (800093c <SPI_PeriClockControl+0xd4>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d106      	bne.n	80008a6 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000898:	4b27      	ldr	r3, [pc, #156]	; (8000938 <SPI_PeriClockControl+0xd0>)
 800089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089c:	4a26      	ldr	r2, [pc, #152]	; (8000938 <SPI_PeriClockControl+0xd0>)
 800089e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008a4:	e040      	b.n	8000928 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a25      	ldr	r2, [pc, #148]	; (8000940 <SPI_PeriClockControl+0xd8>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d106      	bne.n	80008bc <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 80008ae:	4b22      	ldr	r3, [pc, #136]	; (8000938 <SPI_PeriClockControl+0xd0>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	4a21      	ldr	r2, [pc, #132]	; (8000938 <SPI_PeriClockControl+0xd0>)
 80008b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008b8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008ba:	e035      	b.n	8000928 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a21      	ldr	r2, [pc, #132]	; (8000944 <SPI_PeriClockControl+0xdc>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d131      	bne.n	8000928 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 80008c4:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <SPI_PeriClockControl+0xd0>)
 80008c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c8:	4a1b      	ldr	r2, [pc, #108]	; (8000938 <SPI_PeriClockControl+0xd0>)
 80008ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008ce:	6453      	str	r3, [r2, #68]	; 0x44
}
 80008d0:	e02a      	b.n	8000928 <SPI_PeriClockControl+0xc0>
		if(pSPIx == SPI1)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a17      	ldr	r2, [pc, #92]	; (8000934 <SPI_PeriClockControl+0xcc>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d106      	bne.n	80008e8 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 80008da:	4b17      	ldr	r3, [pc, #92]	; (8000938 <SPI_PeriClockControl+0xd0>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	4a16      	ldr	r2, [pc, #88]	; (8000938 <SPI_PeriClockControl+0xd0>)
 80008e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008e4:	6453      	str	r3, [r2, #68]	; 0x44
}
 80008e6:	e01f      	b.n	8000928 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a14      	ldr	r2, [pc, #80]	; (800093c <SPI_PeriClockControl+0xd4>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d106      	bne.n	80008fe <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <SPI_PeriClockControl+0xd0>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	4a10      	ldr	r2, [pc, #64]	; (8000938 <SPI_PeriClockControl+0xd0>)
 80008f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008fa:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008fc:	e014      	b.n	8000928 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a0f      	ldr	r2, [pc, #60]	; (8000940 <SPI_PeriClockControl+0xd8>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d106      	bne.n	8000914 <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <SPI_PeriClockControl+0xd0>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <SPI_PeriClockControl+0xd0>)
 800090c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000912:	e009      	b.n	8000928 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <SPI_PeriClockControl+0xdc>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d105      	bne.n	8000928 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <SPI_PeriClockControl+0xd0>)
 800091e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000920:	4a05      	ldr	r2, [pc, #20]	; (8000938 <SPI_PeriClockControl+0xd0>)
 8000922:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000926:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	40013000 	.word	0x40013000
 8000938:	40023800 	.word	0x40023800
 800093c:	40003800 	.word	0x40003800
 8000940:	40003c00 	.word	0x40003c00
 8000944:	40013400 	.word	0x40013400

08000948 <SPI_Init>:
 *
 * 	@note	:	none
 * 	@date	:	07/24/23
 **********************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]

	/* Enable peripheral clock */
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2101      	movs	r1, #1
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff ff84 	bl	8000868 <SPI_PeriClockControl>

	/* 1. configure the SPI_CR1 register */


	temp |= (pSPIHandle->SPI_Config.SPI_BusConfig << SPI_CR1_MSTR);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	795b      	ldrb	r3, [r3, #5]
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	461a      	mov	r2, r3
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	4313      	orrs	r3, r2
 800096c:	60fb      	str	r3, [r7, #12]

	if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CFG_FD)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	795b      	ldrb	r3, [r3, #5]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d104      	bne.n	8000980 <SPI_Init+0x38>
	{
		/* bidi mode should be cleared */
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	e014      	b.n	80009aa <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CFG_HD)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	795b      	ldrb	r3, [r3, #5]
 8000984:	2b02      	cmp	r3, #2
 8000986:	d104      	bne.n	8000992 <SPI_Init+0x4a>
	{
		/* bidi mode should be set */
		temp |= (1 << SPI_CR1_BIDIMODE);
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	e00b      	b.n	80009aa <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CFG_SIMPLEX_RXONLY)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	795b      	ldrb	r3, [r3, #5]
 8000996:	2b03      	cmp	r3, #3
 8000998:	d107      	bne.n	80009aa <SPI_Init+0x62>
	{
		/* bidi mode should be cleared */
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009a0:	60fb      	str	r3, [r7, #12]
		/* rxonly bit should be set */
		temp |= (1 << SPI_CR1_RXONLY);
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009a8:	60fb      	str	r3, [r7, #12]
	}

	temp |= (pSPIHandle->SPI_Config.SPI_SclkSpeed << SPI_CR1_BR);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	799b      	ldrb	r3, [r3, #6]
 80009ae:	00db      	lsls	r3, r3, #3
 80009b0:	461a      	mov	r2, r3
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	60fb      	str	r3, [r7, #12]

	temp |= (pSPIHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	79db      	ldrb	r3, [r3, #7]
 80009bc:	02db      	lsls	r3, r3, #11
 80009be:	461a      	mov	r2, r3
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	60fb      	str	r3, [r7, #12]

	temp |= (pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	7a1b      	ldrb	r3, [r3, #8]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	461a      	mov	r2, r3
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]

	temp |= (pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	7a5b      	ldrb	r3, [r3, #9]
 80009d8:	461a      	mov	r2, r3
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	4313      	orrs	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]

	temp |= (pSPIHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	7a9b      	ldrb	r3, [r3, #10]
 80009e4:	025b      	lsls	r3, r3, #9
 80009e6:	461a      	mov	r2, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	60fb      	str	r3, [r7, #12]

	temp |= (pSPIHandle->SPI_Config.SPI_SSI << SPI_CR1_SSI);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	7adb      	ldrb	r3, [r3, #11]
 80009f2:	021b      	lsls	r3, r3, #8
 80009f4:	461a      	mov	r2, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = temp;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	601a      	str	r2, [r3, #0]
}
 8000a04:	bf00      	nop
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <SPI_SendData>:
 *
 * 	@note	:	This is a blocking call
 * 	@date	:	07/24/23
 **********************************************************************/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000a18:	e023      	b.n	8000a62 <SPI_SendData+0x56>
	{
		/* wait(block) untill tx buffer become empty */
		while(!(pSPIx->SR & (1 << SPI_SR_TXE)));
 8000a1a:	bf00      	nop
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	f003 0302 	and.w	r3, r3, #2
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d0f9      	beq.n	8000a1c <SPI_SendData+0x10>

		if(pSPIx->CR1 & (1 << SPI_CR1_DFF))
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d00b      	beq.n	8000a4c <SPI_SendData+0x40>
		{
			/* 16 bit frame format */
			pSPIx->DR = *(uint16_t*)pTxBuffer;
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	461a      	mov	r2, r3
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	60da      	str	r2, [r3, #12]
			Len--;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3b01      	subs	r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	3301      	adds	r3, #1
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	e007      	b.n	8000a5c <SPI_SendData+0x50>
		}
		else
		{
			/* 8 bit frame format */
			pSPIx->DR = *pTxBuffer;
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	60da      	str	r2, [r3, #12]
			pTxBuffer++;
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	60bb      	str	r3, [r7, #8]
		}
		Len--;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d1d8      	bne.n	8000a1a <SPI_SendData+0xe>
	}
}
 8000a68:	bf00      	nop
 8000a6a:	bf00      	nop
 8000a6c:	3714      	adds	r7, #20
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <SPI_PeripheralControl>:
 *
 * 	@note	:	none
 * 	@date	:	08/10/23
 **********************************************************************/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b083      	sub	sp, #12
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
 8000a7e:	460b      	mov	r3, r1
 8000a80:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000a82:	78fb      	ldrb	r3, [r7, #3]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d106      	bne.n	8000a96 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000a94:	e005      	b.n	8000aa2 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	601a      	str	r2, [r3, #0]
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <__libc_init_array>:
 8000ab0:	b570      	push	{r4, r5, r6, lr}
 8000ab2:	4d0d      	ldr	r5, [pc, #52]	; (8000ae8 <__libc_init_array+0x38>)
 8000ab4:	4c0d      	ldr	r4, [pc, #52]	; (8000aec <__libc_init_array+0x3c>)
 8000ab6:	1b64      	subs	r4, r4, r5
 8000ab8:	10a4      	asrs	r4, r4, #2
 8000aba:	2600      	movs	r6, #0
 8000abc:	42a6      	cmp	r6, r4
 8000abe:	d109      	bne.n	8000ad4 <__libc_init_array+0x24>
 8000ac0:	4d0b      	ldr	r5, [pc, #44]	; (8000af0 <__libc_init_array+0x40>)
 8000ac2:	4c0c      	ldr	r4, [pc, #48]	; (8000af4 <__libc_init_array+0x44>)
 8000ac4:	f000 f818 	bl	8000af8 <_init>
 8000ac8:	1b64      	subs	r4, r4, r5
 8000aca:	10a4      	asrs	r4, r4, #2
 8000acc:	2600      	movs	r6, #0
 8000ace:	42a6      	cmp	r6, r4
 8000ad0:	d105      	bne.n	8000ade <__libc_init_array+0x2e>
 8000ad2:	bd70      	pop	{r4, r5, r6, pc}
 8000ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ad8:	4798      	blx	r3
 8000ada:	3601      	adds	r6, #1
 8000adc:	e7ee      	b.n	8000abc <__libc_init_array+0xc>
 8000ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae2:	4798      	blx	r3
 8000ae4:	3601      	adds	r6, #1
 8000ae6:	e7f2      	b.n	8000ace <__libc_init_array+0x1e>
 8000ae8:	08000b20 	.word	0x08000b20
 8000aec:	08000b20 	.word	0x08000b20
 8000af0:	08000b20 	.word	0x08000b20
 8000af4:	08000b24 	.word	0x08000b24

08000af8 <_init>:
 8000af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000afa:	bf00      	nop
 8000afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000afe:	bc08      	pop	{r3}
 8000b00:	469e      	mov	lr, r3
 8000b02:	4770      	bx	lr

08000b04 <_fini>:
 8000b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b06:	bf00      	nop
 8000b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b0a:	bc08      	pop	{r3}
 8000b0c:	469e      	mov	lr, r3
 8000b0e:	4770      	bx	lr
