
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ca8  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e50  08000e50  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e50  08000e50  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000e50  08000e50  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e50  08000e50  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e50  08000e50  00010e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e54  08000e54  00010e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000e58  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001330  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000478  00000000  00000000  00021364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000150  00000000  00000000  000217e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000118  00000000  00000000  00021930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002086  00000000  00000000  00021a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000016e2  00000000  00000000  00023ace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009137  00000000  00000000  000251b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002e2e7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000049c  00000000  00000000  0002e338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000004 	.word	0x20000004
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000e38 	.word	0x08000e38

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000008 	.word	0x20000008
 80001e4:	08000e38 	.word	0x08000e38

080001e8 <SPI2_GPIOInits>:




void SPI2_GPIOInits(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80001ee:	4b14      	ldr	r3, [pc, #80]	; (8000240 <SPI2_GPIOInits+0x58>)
 80001f0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001f2:	2302      	movs	r3, #2
 80001f4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001f6:	2305      	movs	r3, #5
 80001f8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001fa:	2300      	movs	r3, #0
 80001fc:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PULL_NONE;
 80001fe:	2300      	movs	r3, #0
 8000200:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HS;
 8000202:	2302      	movs	r3, #2
 8000204:	72bb      	strb	r3, [r7, #10]

	/* SCLK init */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000206:	230d      	movs	r3, #13
 8000208:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	4618      	mov	r0, r3
 800020e:	f000 f9eb 	bl	80005e8 <GPIO_Init>

	/* MOSI init */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000212:	230f      	movs	r3, #15
 8000214:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4618      	mov	r0, r3
 800021a:	f000 f9e5 	bl	80005e8 <GPIO_Init>

	/* MISO init */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800021e:	230e      	movs	r3, #14
 8000220:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f9df 	bl	80005e8 <GPIO_Init>

	/* NSS init */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800022a:	230c      	movs	r3, #12
 800022c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f9d9 	bl	80005e8 <GPIO_Init>
}
 8000236:	bf00      	nop
 8000238:	3710      	adds	r7, #16
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	40020400 	.word	0x40020400

08000244 <SPI2_Inits>:



void SPI2_Inits(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b084      	sub	sp, #16
 8000248:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <SPI2_Inits+0x40>)
 800024c:	603b      	str	r3, [r7, #0]
	SPI2Handle.SPI_Config.SPI_BusConfig = SPI_BUS_CFG_FD;
 800024e:	2301      	movs	r3, #1
 8000250:	717b      	strb	r3, [r7, #5]
	SPI2Handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000252:	2301      	movs	r3, #1
 8000254:	713b      	strb	r3, [r7, #4]
	SPI2Handle.SPI_Config.SPI_SclkSpeed = SPI_SCLK_SPEED_PCLK_DIV_8;
 8000256:	2302      	movs	r3, #2
 8000258:	71bb      	strb	r3, [r7, #6]
	SPI2Handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
 800025a:	2300      	movs	r3, #0
 800025c:	71fb      	strb	r3, [r7, #7]
	SPI2Handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 800025e:	2300      	movs	r3, #0
 8000260:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 8000262:	2300      	movs	r3, #0
 8000264:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPI_Config.SPI_SSI = SPI_SSI_DI;
 8000266:	2300      	movs	r3, #0
 8000268:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPI_Config.SPI_SSM = SPI_SSM_DI;
 800026a:	2300      	movs	r3, #0
 800026c:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPI_Config.SPI_SSOE = SPI_SSOE_EN;
 800026e:	2301      	movs	r3, #1
 8000270:	733b      	strb	r3, [r7, #12]


	SPI_Init(&SPI2Handle);
 8000272:	463b      	mov	r3, r7
 8000274:	4618      	mov	r0, r3
 8000276:	f000 fcaf 	bl	8000bd8 <SPI_Init>
}
 800027a:	bf00      	nop
 800027c:	3710      	adds	r7, #16
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	40003800 	.word	0x40003800

08000288 <ItButton_GPIOInits>:

void ItButton_GPIOInits(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
		GPIO_Handle_t gpioItButton;

		/* configure interrupt button pin */
		gpioItButton.pGPIOx = GPIOA;
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <ItButton_GPIOInits+0x3c>)
 8000290:	607b      	str	r3, [r7, #4]
		gpioItButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000292:	2300      	movs	r3, #0
 8000294:	723b      	strb	r3, [r7, #8]
		gpioItButton.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_RT;
 8000296:	2305      	movs	r3, #5
 8000298:	727b      	strb	r3, [r7, #9]
		gpioItButton.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PULL_NONE;
 800029a:	2300      	movs	r3, #0
 800029c:	72fb      	strb	r3, [r7, #11]
		gpioItButton.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_MS;
 800029e:	2301      	movs	r3, #1
 80002a0:	72bb      	strb	r3, [r7, #10]

		/* initialize gpios */
		GPIO_Init(&gpioItButton);
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f99f 	bl	80005e8 <GPIO_Init>

		/* configure IRQs */
		GPIO_IRQPriorityConfig(IRQ_NO_EXTI0, IRQ_NVIC_PRIO15);
 80002aa:	210f      	movs	r1, #15
 80002ac:	2006      	movs	r0, #6
 80002ae:	f000 fbdb 	bl	8000a68 <GPIO_IRQPriorityConfig>
		GPIO_IRQConfig(IRQ_NO_EXTI0, ENABLE);
 80002b2:	2101      	movs	r1, #1
 80002b4:	2006      	movs	r0, #6
 80002b6:	f000 fb51 	bl	800095c <GPIO_IRQConfig>
}
 80002ba:	bf00      	nop
 80002bc:	3710      	adds	r7, #16
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40020000 	.word	0x40020000

080002c8 <VerifyResponse>:

uint8_t VerifyResponse(uint8_t ackbyte)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	71fb      	strb	r3, [r7, #7]
	if(ackbyte == 0xF5)
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	2bf5      	cmp	r3, #245	; 0xf5
 80002d6:	d101      	bne.n	80002dc <VerifyResponse+0x14>
	{
		return SET;
 80002d8:	2301      	movs	r3, #1
 80002da:	e000      	b.n	80002de <VerifyResponse+0x16>
	}

	return RESET;
 80002dc:	2300      	movs	r3, #0
}
 80002de:	4618      	mov	r0, r3
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
	...

080002ec <delay>:

void delay()
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 250000; i++);
 80002f2:	2300      	movs	r3, #0
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	e002      	b.n	80002fe <delay+0x12>
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	3301      	adds	r3, #1
 80002fc:	607b      	str	r3, [r7, #4]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4a04      	ldr	r2, [pc, #16]	; (8000314 <delay+0x28>)
 8000302:	4293      	cmp	r3, r2
 8000304:	ddf8      	ble.n	80002f8 <delay+0xc>
}
 8000306:	bf00      	nop
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	0003d08f 	.word	0x0003d08f

08000318 <main>:

int main(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	/* this function will be used to initialize GPIO pins to behave as SPI2 pins */
	SPI2_GPIOInits();
 800031c:	f7ff ff64 	bl	80001e8 <SPI2_GPIOInits>

	/* this function will be used to initialize SPI2 peripheral parameters */
	SPI2_Inits();
 8000320:	f7ff ff90 	bl	8000244 <SPI2_Inits>

	/* this function will be used to initialize user button as an interrupt */
	ItButton_GPIOInits();
 8000324:	f7ff ffb0 	bl	8000288 <ItButton_GPIOInits>

	while(1);
 8000328:	e7fe      	b.n	8000328 <main+0x10>
	...

0800032c <EXTI0_IRQHandler>:
}


/* toggle the gpio pin when interrupt is triggered */
void EXTI0_IRQHandler(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0
	/* debouncing protection */
	delay();
 8000332:	f7ff ffdb 	bl	80002ec <delay>
	GPIO_IRQHandling(GPIO_PIN_NO_0);
 8000336:	2000      	movs	r0, #0
 8000338:	f000 fbbe 	bl	8000ab8 <GPIO_IRQHandling>

	/* enable the SPI2 peripheral after configurations */
	SPI_PeripheralControl(SPI2, ENABLE);
 800033c:	2101      	movs	r1, #1
 800033e:	481e      	ldr	r0, [pc, #120]	; (80003b8 <EXTI0_IRQHandler+0x8c>)
 8000340:	f000 fd23 	bl	8000d8a <SPI_PeripheralControl>

	/* send command to set led */
	uint8_t command = CMD_LED_CTRL;
 8000344:	2350      	movs	r3, #80	; 0x50
 8000346:	71fb      	strb	r3, [r7, #7]
	uint8_t ack_byte;
	uint8_t args[2];
	SPI_SendData(SPI2, &command, 1);
 8000348:	1dfb      	adds	r3, r7, #7
 800034a:	2201      	movs	r2, #1
 800034c:	4619      	mov	r1, r3
 800034e:	481a      	ldr	r0, [pc, #104]	; (80003b8 <EXTI0_IRQHandler+0x8c>)
 8000350:	f000 fcb1 	bl	8000cb6 <SPI_SendData>
	SPI_ReceiveData(SPI2, &dummy_read, 1);
 8000354:	2201      	movs	r2, #1
 8000356:	4919      	ldr	r1, [pc, #100]	; (80003bc <EXTI0_IRQHandler+0x90>)
 8000358:	4817      	ldr	r0, [pc, #92]	; (80003b8 <EXTI0_IRQHandler+0x8c>)
 800035a:	f000 fce1 	bl	8000d20 <SPI_ReceiveData>

	/* send dummy byte to fetch the response from the slave */
	SPI_SendData(SPI2, &dummy_write, 1);
 800035e:	2201      	movs	r2, #1
 8000360:	4917      	ldr	r1, [pc, #92]	; (80003c0 <EXTI0_IRQHandler+0x94>)
 8000362:	4815      	ldr	r0, [pc, #84]	; (80003b8 <EXTI0_IRQHandler+0x8c>)
 8000364:	f000 fca7 	bl	8000cb6 <SPI_SendData>

	/* receive the ack byte */
	SPI_ReceiveData(SPI2, &ack_byte, 1);
 8000368:	1dbb      	adds	r3, r7, #6
 800036a:	2201      	movs	r2, #1
 800036c:	4619      	mov	r1, r3
 800036e:	4812      	ldr	r0, [pc, #72]	; (80003b8 <EXTI0_IRQHandler+0x8c>)
 8000370:	f000 fcd6 	bl	8000d20 <SPI_ReceiveData>

	/* verify ack byte */
	if(VerifyResponse(ack_byte))
 8000374:	79bb      	ldrb	r3, [r7, #6]
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ffa6 	bl	80002c8 <VerifyResponse>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d009      	beq.n	8000396 <EXTI0_IRQHandler+0x6a>
	{
		/* send arguments */
		args[0] = LED_PIN;
 8000382:	2309      	movs	r3, #9
 8000384:	713b      	strb	r3, [r7, #4]
		args[1] = LED_ON;
 8000386:	2301      	movs	r3, #1
 8000388:	717b      	strb	r3, [r7, #5]
		SPI_SendData(SPI2, args, 2);
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2202      	movs	r2, #2
 800038e:	4619      	mov	r1, r3
 8000390:	4809      	ldr	r0, [pc, #36]	; (80003b8 <EXTI0_IRQHandler+0x8c>)
 8000392:	f000 fc90 	bl	8000cb6 <SPI_SendData>
	}

	/* wait till data has sent completely */
	while(SPI_GetFlagStatus(SPI2, SPI_SR_BSY));
 8000396:	bf00      	nop
 8000398:	2108      	movs	r1, #8
 800039a:	4807      	ldr	r0, [pc, #28]	; (80003b8 <EXTI0_IRQHandler+0x8c>)
 800039c:	f000 fd11 	bl	8000dc2 <SPI_GetFlagStatus>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d1f8      	bne.n	8000398 <EXTI0_IRQHandler+0x6c>

	/* disable the SPI2 peripheral after configurations */
	SPI_PeripheralControl(SPI2, DISABLE);
 80003a6:	2100      	movs	r1, #0
 80003a8:	4803      	ldr	r0, [pc, #12]	; (80003b8 <EXTI0_IRQHandler+0x8c>)
 80003aa:	f000 fcee 	bl	8000d8a <SPI_PeripheralControl>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40003800 	.word	0x40003800
 80003bc:	20000020 	.word	0x20000020
 80003c0:	20000000 	.word	0x20000000

080003c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c4:	480d      	ldr	r0, [pc, #52]	; (80003fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003cc:	480c      	ldr	r0, [pc, #48]	; (8000400 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ce:	490d      	ldr	r1, [pc, #52]	; (8000404 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003d0:	4a0d      	ldr	r2, [pc, #52]	; (8000408 <LoopForever+0xe>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d4:	e002      	b.n	80003dc <LoopCopyDataInit>

080003d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003da:	3304      	adds	r3, #4

080003dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003e0:	d3f9      	bcc.n	80003d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003e2:	4a0a      	ldr	r2, [pc, #40]	; (800040c <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e4:	4c0a      	ldr	r4, [pc, #40]	; (8000410 <LoopForever+0x16>)
  movs r3, #0
 80003e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e8:	e001      	b.n	80003ee <LoopFillZerobss>

080003ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ec:	3204      	adds	r2, #4

080003ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003f0:	d3fb      	bcc.n	80003ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003f2:	f000 fcfd 	bl	8000df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f6:	f7ff ff8f 	bl	8000318 <main>

080003fa <LoopForever>:

LoopForever:
  b LoopForever
 80003fa:	e7fe      	b.n	80003fa <LoopForever>
  ldr   r0, =_estack
 80003fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000400:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000404:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000408:	08000e58 	.word	0x08000e58
  ldr r2, =_sbss
 800040c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000410:	20000024 	.word	0x20000024

08000414 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000414:	e7fe      	b.n	8000414 <ADC_IRQHandler>
	...

08000418 <GPIO_PeriClockControl>:
 *
 * 	@note	:	none
 * 	@date	:	07/19/23
 **********************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	460b      	mov	r3, r1
 8000422:	70fb      	strb	r3, [r7, #3]
	if(EnorDi)
 8000424:	78fb      	ldrb	r3, [r7, #3]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d062      	beq.n	80004f0 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a64      	ldr	r2, [pc, #400]	; (80005c0 <GPIO_PeriClockControl+0x1a8>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000432:	4b64      	ldr	r3, [pc, #400]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	4a63      	ldr	r2, [pc, #396]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOI)
		{
			GPIOI_PCLK_DI();
		}
	}
}
 800043e:	e0b9      	b.n	80005b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a61      	ldr	r2, [pc, #388]	; (80005c8 <GPIO_PeriClockControl+0x1b0>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000448:	4b5e      	ldr	r3, [pc, #376]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044c:	4a5d      	ldr	r2, [pc, #372]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 800044e:	f043 0302 	orr.w	r3, r3, #2
 8000452:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000454:	e0ae      	b.n	80005b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a5c      	ldr	r2, [pc, #368]	; (80005cc <GPIO_PeriClockControl+0x1b4>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d106      	bne.n	800046c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800045e:	4b59      	ldr	r3, [pc, #356]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	4a58      	ldr	r2, [pc, #352]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 8000464:	f043 0304 	orr.w	r3, r3, #4
 8000468:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046a:	e0a3      	b.n	80005b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a58      	ldr	r2, [pc, #352]	; (80005d0 <GPIO_PeriClockControl+0x1b8>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d106      	bne.n	8000482 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000474:	4b53      	ldr	r3, [pc, #332]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	4a52      	ldr	r2, [pc, #328]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 800047a:	f043 0308 	orr.w	r3, r3, #8
 800047e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000480:	e098      	b.n	80005b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a53      	ldr	r2, [pc, #332]	; (80005d4 <GPIO_PeriClockControl+0x1bc>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d106      	bne.n	8000498 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800048a:	4b4e      	ldr	r3, [pc, #312]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 800048c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048e:	4a4d      	ldr	r2, [pc, #308]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 8000490:	f043 0310 	orr.w	r3, r3, #16
 8000494:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000496:	e08d      	b.n	80005b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a4f      	ldr	r2, [pc, #316]	; (80005d8 <GPIO_PeriClockControl+0x1c0>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d106      	bne.n	80004ae <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80004a0:	4b48      	ldr	r3, [pc, #288]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 80004a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a4:	4a47      	ldr	r2, [pc, #284]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 80004a6:	f043 0320 	orr.w	r3, r3, #32
 80004aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ac:	e082      	b.n	80005b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4a4a      	ldr	r2, [pc, #296]	; (80005dc <GPIO_PeriClockControl+0x1c4>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d106      	bne.n	80004c4 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80004b6:	4b43      	ldr	r3, [pc, #268]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 80004b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ba:	4a42      	ldr	r2, [pc, #264]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 80004bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c2:	e077      	b.n	80005b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4a46      	ldr	r2, [pc, #280]	; (80005e0 <GPIO_PeriClockControl+0x1c8>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d106      	bne.n	80004da <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80004cc:	4b3d      	ldr	r3, [pc, #244]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 80004ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d0:	4a3c      	ldr	r2, [pc, #240]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 80004d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d8:	e06c      	b.n	80005b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4a41      	ldr	r2, [pc, #260]	; (80005e4 <GPIO_PeriClockControl+0x1cc>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d168      	bne.n	80005b4 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80004e2:	4b38      	ldr	r3, [pc, #224]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a37      	ldr	r2, [pc, #220]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 80004e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ee:	e061      	b.n	80005b4 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a33      	ldr	r2, [pc, #204]	; (80005c0 <GPIO_PeriClockControl+0x1a8>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d106      	bne.n	8000506 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DI();
 80004f8:	4b32      	ldr	r3, [pc, #200]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 80004fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fc:	4a31      	ldr	r2, [pc, #196]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 80004fe:	f023 0301 	bic.w	r3, r3, #1
 8000502:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000504:	e056      	b.n	80005b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4a2f      	ldr	r2, [pc, #188]	; (80005c8 <GPIO_PeriClockControl+0x1b0>)
 800050a:	4293      	cmp	r3, r2
 800050c:	d106      	bne.n	800051c <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DI();
 800050e:	4b2d      	ldr	r3, [pc, #180]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	4a2c      	ldr	r2, [pc, #176]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 8000514:	f023 0302 	bic.w	r3, r3, #2
 8000518:	6313      	str	r3, [r2, #48]	; 0x30
}
 800051a:	e04b      	b.n	80005b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4a2b      	ldr	r2, [pc, #172]	; (80005cc <GPIO_PeriClockControl+0x1b4>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d106      	bne.n	8000532 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DI();
 8000524:	4b27      	ldr	r3, [pc, #156]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 8000526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000528:	4a26      	ldr	r2, [pc, #152]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 800052a:	f023 0304 	bic.w	r3, r3, #4
 800052e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000530:	e040      	b.n	80005b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4a26      	ldr	r2, [pc, #152]	; (80005d0 <GPIO_PeriClockControl+0x1b8>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d106      	bne.n	8000548 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DI();
 800053a:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a21      	ldr	r2, [pc, #132]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 8000540:	f023 0308 	bic.w	r3, r3, #8
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000546:	e035      	b.n	80005b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4a22      	ldr	r2, [pc, #136]	; (80005d4 <GPIO_PeriClockControl+0x1bc>)
 800054c:	4293      	cmp	r3, r2
 800054e:	d106      	bne.n	800055e <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DI();
 8000550:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 8000552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000554:	4a1b      	ldr	r2, [pc, #108]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 8000556:	f023 0310 	bic.w	r3, r3, #16
 800055a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800055c:	e02a      	b.n	80005b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4a1d      	ldr	r2, [pc, #116]	; (80005d8 <GPIO_PeriClockControl+0x1c0>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d106      	bne.n	8000574 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DI();
 8000566:	4b17      	ldr	r3, [pc, #92]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a16      	ldr	r2, [pc, #88]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 800056c:	f023 0320 	bic.w	r3, r3, #32
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000572:	e01f      	b.n	80005b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4a19      	ldr	r2, [pc, #100]	; (80005dc <GPIO_PeriClockControl+0x1c4>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d106      	bne.n	800058a <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DI();
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 800057e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000580:	4a10      	ldr	r2, [pc, #64]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 8000582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000586:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000588:	e014      	b.n	80005b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <GPIO_PeriClockControl+0x1c8>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d106      	bne.n	80005a0 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DI();
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 8000598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800059e:	e009      	b.n	80005b4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <GPIO_PeriClockControl+0x1cc>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d105      	bne.n	80005b4 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DI();
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 80005aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ac:	4a05      	ldr	r2, [pc, #20]	; (80005c4 <GPIO_PeriClockControl+0x1ac>)
 80005ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	40020000 	.word	0x40020000
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40020400 	.word	0x40020400
 80005cc:	40020800 	.word	0x40020800
 80005d0:	40020c00 	.word	0x40020c00
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40021400 	.word	0x40021400
 80005dc:	40021800 	.word	0x40021800
 80005e0:	40021c00 	.word	0x40021c00
 80005e4:	40022000 	.word	0x40022000

080005e8 <GPIO_Init>:
 *
 * 	@note	:	none
 * 	@date	:	07/19/23
 **********************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]

	/* Enable peripheral clock */
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff ff0c 	bl	8000418 <GPIO_PeriClockControl>

	/* 1. configure the mode of GPIO pin */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	795b      	ldrb	r3, [r3, #5]
 8000604:	2b03      	cmp	r3, #3
 8000606:	d820      	bhi.n	800064a <GPIO_Init+0x62>
	{
		/* non interrupt mode */
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	795b      	ldrb	r3, [r3, #5]
 800060c:	461a      	mov	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791b      	ldrb	r3, [r3, #4]
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	fa02 f303 	lsl.w	r3, r2, r3
 8000618:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	791b      	ldrb	r3, [r3, #4]
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	2103      	movs	r1, #3
 8000628:	fa01 f303 	lsl.w	r3, r1, r3
 800062c:	43db      	mvns	r3, r3
 800062e:	4619      	mov	r1, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	400a      	ands	r2, r1
 8000636:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	6819      	ldr	r1, [r3, #0]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	68fa      	ldr	r2, [r7, #12]
 8000644:	430a      	orrs	r2, r1
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	e0cb      	b.n	80007e2 <GPIO_Init+0x1fa>
	}
	else
	{
		/* interrupt mode */
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	795b      	ldrb	r3, [r3, #5]
 800064e:	2b04      	cmp	r3, #4
 8000650:	d117      	bne.n	8000682 <GPIO_Init+0x9a>
		{
			/* 1. enable falling edge detection */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000652:	4b4e      	ldr	r3, [pc, #312]	; (800078c <GPIO_Init+0x1a4>)
 8000654:	68db      	ldr	r3, [r3, #12]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	7912      	ldrb	r2, [r2, #4]
 800065a:	4611      	mov	r1, r2
 800065c:	2201      	movs	r2, #1
 800065e:	408a      	lsls	r2, r1
 8000660:	4611      	mov	r1, r2
 8000662:	4a4a      	ldr	r2, [pc, #296]	; (800078c <GPIO_Init+0x1a4>)
 8000664:	430b      	orrs	r3, r1
 8000666:	60d3      	str	r3, [r2, #12]
			/* clear RTSR */
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000668:	4b48      	ldr	r3, [pc, #288]	; (800078c <GPIO_Init+0x1a4>)
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	7912      	ldrb	r2, [r2, #4]
 8000670:	4611      	mov	r1, r2
 8000672:	2201      	movs	r2, #1
 8000674:	408a      	lsls	r2, r1
 8000676:	43d2      	mvns	r2, r2
 8000678:	4611      	mov	r1, r2
 800067a:	4a44      	ldr	r2, [pc, #272]	; (800078c <GPIO_Init+0x1a4>)
 800067c:	400b      	ands	r3, r1
 800067e:	6093      	str	r3, [r2, #8]
 8000680:	e035      	b.n	80006ee <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	795b      	ldrb	r3, [r3, #5]
 8000686:	2b05      	cmp	r3, #5
 8000688:	d117      	bne.n	80006ba <GPIO_Init+0xd2>
		{
			/* 1. enable rising edge detection */
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800068a:	4b40      	ldr	r3, [pc, #256]	; (800078c <GPIO_Init+0x1a4>)
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	7912      	ldrb	r2, [r2, #4]
 8000692:	4611      	mov	r1, r2
 8000694:	2201      	movs	r2, #1
 8000696:	408a      	lsls	r2, r1
 8000698:	4611      	mov	r1, r2
 800069a:	4a3c      	ldr	r2, [pc, #240]	; (800078c <GPIO_Init+0x1a4>)
 800069c:	430b      	orrs	r3, r1
 800069e:	6093      	str	r3, [r2, #8]
			/* clear FTSR */
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006a0:	4b3a      	ldr	r3, [pc, #232]	; (800078c <GPIO_Init+0x1a4>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	7912      	ldrb	r2, [r2, #4]
 80006a8:	4611      	mov	r1, r2
 80006aa:	2201      	movs	r2, #1
 80006ac:	408a      	lsls	r2, r1
 80006ae:	43d2      	mvns	r2, r2
 80006b0:	4611      	mov	r1, r2
 80006b2:	4a36      	ldr	r2, [pc, #216]	; (800078c <GPIO_Init+0x1a4>)
 80006b4:	400b      	ands	r3, r1
 80006b6:	60d3      	str	r3, [r2, #12]
 80006b8:	e019      	b.n	80006ee <GPIO_Init+0x106>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	795b      	ldrb	r3, [r3, #5]
 80006be:	2b06      	cmp	r3, #6
 80006c0:	d115      	bne.n	80006ee <GPIO_Init+0x106>
		{
			/* 1. enable both falling edge and rising edge detection */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006c2:	4b32      	ldr	r3, [pc, #200]	; (800078c <GPIO_Init+0x1a4>)
 80006c4:	68db      	ldr	r3, [r3, #12]
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	7912      	ldrb	r2, [r2, #4]
 80006ca:	4611      	mov	r1, r2
 80006cc:	2201      	movs	r2, #1
 80006ce:	408a      	lsls	r2, r1
 80006d0:	4611      	mov	r1, r2
 80006d2:	4a2e      	ldr	r2, [pc, #184]	; (800078c <GPIO_Init+0x1a4>)
 80006d4:	430b      	orrs	r3, r1
 80006d6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d8:	4b2c      	ldr	r3, [pc, #176]	; (800078c <GPIO_Init+0x1a4>)
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	7912      	ldrb	r2, [r2, #4]
 80006e0:	4611      	mov	r1, r2
 80006e2:	2201      	movs	r2, #1
 80006e4:	408a      	lsls	r2, r1
 80006e6:	4611      	mov	r1, r2
 80006e8:	4a28      	ldr	r2, [pc, #160]	; (800078c <GPIO_Init+0x1a4>)
 80006ea:	430b      	orrs	r3, r1
 80006ec:	6093      	str	r3, [r2, #8]
		}

		/* 2. configure the GPIO port selection in SYSCFG_EXTICR */
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	089b      	lsrs	r3, r3, #2
 80006f4:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) * 4;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	f003 0303 	and.w	r3, r3, #3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	72bb      	strb	r3, [r7, #10]
		SYSCFG_PCLK_EN();
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <GPIO_Init+0x1a8>)
 8000706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <GPIO_Init+0x1a8>)
 800070a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800070e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx) << temp2);
 8000710:	4a20      	ldr	r2, [pc, #128]	; (8000794 <GPIO_Init+0x1ac>)
 8000712:	7afb      	ldrb	r3, [r7, #11]
 8000714:	3302      	adds	r3, #2
 8000716:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	491e      	ldr	r1, [pc, #120]	; (8000798 <GPIO_Init+0x1b0>)
 8000720:	428b      	cmp	r3, r1
 8000722:	d049      	beq.n	80007b8 <GPIO_Init+0x1d0>
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	491c      	ldr	r1, [pc, #112]	; (800079c <GPIO_Init+0x1b4>)
 800072a:	428b      	cmp	r3, r1
 800072c:	d02b      	beq.n	8000786 <GPIO_Init+0x19e>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	491b      	ldr	r1, [pc, #108]	; (80007a0 <GPIO_Init+0x1b8>)
 8000734:	428b      	cmp	r3, r1
 8000736:	d024      	beq.n	8000782 <GPIO_Init+0x19a>
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4919      	ldr	r1, [pc, #100]	; (80007a4 <GPIO_Init+0x1bc>)
 800073e:	428b      	cmp	r3, r1
 8000740:	d01d      	beq.n	800077e <GPIO_Init+0x196>
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4918      	ldr	r1, [pc, #96]	; (80007a8 <GPIO_Init+0x1c0>)
 8000748:	428b      	cmp	r3, r1
 800074a:	d016      	beq.n	800077a <GPIO_Init+0x192>
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4916      	ldr	r1, [pc, #88]	; (80007ac <GPIO_Init+0x1c4>)
 8000752:	428b      	cmp	r3, r1
 8000754:	d00f      	beq.n	8000776 <GPIO_Init+0x18e>
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4915      	ldr	r1, [pc, #84]	; (80007b0 <GPIO_Init+0x1c8>)
 800075c:	428b      	cmp	r3, r1
 800075e:	d008      	beq.n	8000772 <GPIO_Init+0x18a>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4913      	ldr	r1, [pc, #76]	; (80007b4 <GPIO_Init+0x1cc>)
 8000766:	428b      	cmp	r3, r1
 8000768:	d101      	bne.n	800076e <GPIO_Init+0x186>
 800076a:	2307      	movs	r3, #7
 800076c:	e025      	b.n	80007ba <GPIO_Init+0x1d2>
 800076e:	2300      	movs	r3, #0
 8000770:	e023      	b.n	80007ba <GPIO_Init+0x1d2>
 8000772:	2306      	movs	r3, #6
 8000774:	e021      	b.n	80007ba <GPIO_Init+0x1d2>
 8000776:	2305      	movs	r3, #5
 8000778:	e01f      	b.n	80007ba <GPIO_Init+0x1d2>
 800077a:	2304      	movs	r3, #4
 800077c:	e01d      	b.n	80007ba <GPIO_Init+0x1d2>
 800077e:	2303      	movs	r3, #3
 8000780:	e01b      	b.n	80007ba <GPIO_Init+0x1d2>
 8000782:	2302      	movs	r3, #2
 8000784:	e019      	b.n	80007ba <GPIO_Init+0x1d2>
 8000786:	2301      	movs	r3, #1
 8000788:	e017      	b.n	80007ba <GPIO_Init+0x1d2>
 800078a:	bf00      	nop
 800078c:	40013c00 	.word	0x40013c00
 8000790:	40023800 	.word	0x40023800
 8000794:	40013800 	.word	0x40013800
 8000798:	40020000 	.word	0x40020000
 800079c:	40020400 	.word	0x40020400
 80007a0:	40020800 	.word	0x40020800
 80007a4:	40020c00 	.word	0x40020c00
 80007a8:	40021000 	.word	0x40021000
 80007ac:	40021400 	.word	0x40021400
 80007b0:	40021800 	.word	0x40021800
 80007b4:	40021c00 	.word	0x40021c00
 80007b8:	2300      	movs	r3, #0
 80007ba:	7ab9      	ldrb	r1, [r7, #10]
 80007bc:	408b      	lsls	r3, r1
 80007be:	4618      	mov	r0, r3
 80007c0:	4964      	ldr	r1, [pc, #400]	; (8000954 <GPIO_Init+0x36c>)
 80007c2:	7afb      	ldrb	r3, [r7, #11]
 80007c4:	4302      	orrs	r2, r0
 80007c6:	3302      	adds	r3, #2
 80007c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		/* 3. enable the EXTI interrupt delivery using IMR */
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007cc:	4b62      	ldr	r3, [pc, #392]	; (8000958 <GPIO_Init+0x370>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	7912      	ldrb	r2, [r2, #4]
 80007d4:	4611      	mov	r1, r2
 80007d6:	2201      	movs	r2, #1
 80007d8:	408a      	lsls	r2, r1
 80007da:	4611      	mov	r1, r2
 80007dc:	4a5e      	ldr	r2, [pc, #376]	; (8000958 <GPIO_Init+0x370>)
 80007de:	430b      	orrs	r3, r1
 80007e0:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]

	/* 2. configure the speed of GPIO pin */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	799b      	ldrb	r3, [r3, #6]
 80007ea:	461a      	mov	r2, r3
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	689a      	ldr	r2, [r3, #8]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	791b      	ldrb	r3, [r3, #4]
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	2103      	movs	r1, #3
 8000806:	fa01 f303 	lsl.w	r3, r1, r3
 800080a:	43db      	mvns	r3, r3
 800080c:	4619      	mov	r1, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	400a      	ands	r2, r1
 8000814:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	6899      	ldr	r1, [r3, #8]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	430a      	orrs	r2, r1
 8000824:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]

	/* 3. configure the pull up/down state */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	79db      	ldrb	r3, [r3, #7]
 800082e:	461a      	mov	r2, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	791b      	ldrb	r3, [r3, #4]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	68da      	ldr	r2, [r3, #12]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	791b      	ldrb	r3, [r3, #4]
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	2103      	movs	r1, #3
 800084a:	fa01 f303 	lsl.w	r3, r1, r3
 800084e:	43db      	mvns	r3, r3
 8000850:	4619      	mov	r1, r3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	400a      	ands	r2, r1
 8000858:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	68d9      	ldr	r1, [r3, #12]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	430a      	orrs	r2, r1
 8000868:	60da      	str	r2, [r3, #12]
	temp = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]

	/* 4. configure the output type */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	7a1b      	ldrb	r3, [r3, #8]
 8000872:	461a      	mov	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	791b      	ldrb	r3, [r3, #4]
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	685a      	ldr	r2, [r3, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	791b      	ldrb	r3, [r3, #4]
 8000888:	4619      	mov	r1, r3
 800088a:	2301      	movs	r3, #1
 800088c:	408b      	lsls	r3, r1
 800088e:	43db      	mvns	r3, r3
 8000890:	4619      	mov	r1, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	400a      	ands	r2, r1
 8000898:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	6859      	ldr	r1, [r3, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	68fa      	ldr	r2, [r7, #12]
 80008a6:	430a      	orrs	r2, r1
 80008a8:	605a      	str	r2, [r3, #4]
	temp = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]

	/* 5. configure the alternate functionality */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	795b      	ldrb	r3, [r3, #5]
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d149      	bne.n	800094a <GPIO_Init+0x362>
	{
		if((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) < GPIO_PIN_NO_8)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	791b      	ldrb	r3, [r3, #4]
 80008ba:	2b07      	cmp	r3, #7
 80008bc:	d81f      	bhi.n	80008fe <GPIO_Init+0x316>
		{
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	7a5b      	ldrb	r3, [r3, #9]
 80008c2:	461a      	mov	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	791b      	ldrb	r3, [r3, #4]
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFRL &= ~(0xF<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	6a1a      	ldr	r2, [r3, #32]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	791b      	ldrb	r3, [r3, #4]
 80008da:	4619      	mov	r1, r3
 80008dc:	230f      	movs	r3, #15
 80008de:	408b      	lsls	r3, r1
 80008e0:	43db      	mvns	r3, r3
 80008e2:	4619      	mov	r1, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	400a      	ands	r2, r1
 80008ea:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= temp;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	6a19      	ldr	r1, [r3, #32]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	430a      	orrs	r2, r1
 80008fa:	621a      	str	r2, [r3, #32]
 80008fc:	e023      	b.n	8000946 <GPIO_Init+0x35e>
		}
		else
		{
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % GPIO_PIN_NO_8)));
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	7a5b      	ldrb	r3, [r3, #9]
 8000902:	461a      	mov	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	791b      	ldrb	r3, [r3, #4]
 8000908:	f003 0307 	and.w	r3, r3, #7
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFRH &= ~(0xF << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % GPIO_PIN_NO_8)));
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	791b      	ldrb	r3, [r3, #4]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	210f      	movs	r1, #15
 8000926:	fa01 f303 	lsl.w	r3, r1, r3
 800092a:	43db      	mvns	r3, r3
 800092c:	4619      	mov	r1, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	400a      	ands	r2, r1
 8000934:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFRH |= temp;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	68fa      	ldr	r2, [r7, #12]
 8000942:	430a      	orrs	r2, r1
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
		}
		temp = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
	}
}
 800094a:	bf00      	nop
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40013800 	.word	0x40013800
 8000958:	40013c00 	.word	0x40013c00

0800095c <GPIO_IRQConfig>:
 *
 * 	@note	:	none
 * 	@date	:	07/19/23
 **********************************************************************/
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	460a      	mov	r2, r1
 8000966:	71fb      	strb	r3, [r7, #7]
 8000968:	4613      	mov	r3, r2
 800096a:	71bb      	strb	r3, [r7, #6]
	if(EnorDi)
 800096c:	79bb      	ldrb	r3, [r7, #6]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d033      	beq.n	80009da <GPIO_IRQConfig+0x7e>
	{
		if(IRQNumber <= 31)
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b1f      	cmp	r3, #31
 8000976:	d80a      	bhi.n	800098e <GPIO_IRQConfig+0x32>
		{
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000978:	4b35      	ldr	r3, [pc, #212]	; (8000a50 <GPIO_IRQConfig+0xf4>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	79fa      	ldrb	r2, [r7, #7]
 800097e:	2101      	movs	r1, #1
 8000980:	fa01 f202 	lsl.w	r2, r1, r2
 8000984:	4611      	mov	r1, r2
 8000986:	4a32      	ldr	r2, [pc, #200]	; (8000a50 <GPIO_IRQConfig+0xf4>)
 8000988:	430b      	orrs	r3, r1
 800098a:	6013      	str	r3, [r2, #0]
		else if((IRQNumber >= 64) && (IRQNumber < 96))
		{
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 800098c:	e059      	b.n	8000a42 <GPIO_IRQConfig+0xe6>
		else if((IRQNumber >= 32) && (IRQNumber < 64))
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	2b1f      	cmp	r3, #31
 8000992:	d90f      	bls.n	80009b4 <GPIO_IRQConfig+0x58>
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	2b3f      	cmp	r3, #63	; 0x3f
 8000998:	d80c      	bhi.n	80009b4 <GPIO_IRQConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800099a:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <GPIO_IRQConfig+0xf8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	79fa      	ldrb	r2, [r7, #7]
 80009a0:	f002 021f 	and.w	r2, r2, #31
 80009a4:	2101      	movs	r1, #1
 80009a6:	fa01 f202 	lsl.w	r2, r1, r2
 80009aa:	4611      	mov	r1, r2
 80009ac:	4a29      	ldr	r2, [pc, #164]	; (8000a54 <GPIO_IRQConfig+0xf8>)
 80009ae:	430b      	orrs	r3, r1
 80009b0:	6013      	str	r3, [r2, #0]
 80009b2:	e046      	b.n	8000a42 <GPIO_IRQConfig+0xe6>
		else if((IRQNumber >= 64) && (IRQNumber < 96))
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	2b3f      	cmp	r3, #63	; 0x3f
 80009b8:	d943      	bls.n	8000a42 <GPIO_IRQConfig+0xe6>
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b5f      	cmp	r3, #95	; 0x5f
 80009be:	d840      	bhi.n	8000a42 <GPIO_IRQConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 80009c0:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <GPIO_IRQConfig+0xfc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	79fa      	ldrb	r2, [r7, #7]
 80009c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009ca:	2101      	movs	r1, #1
 80009cc:	fa01 f202 	lsl.w	r2, r1, r2
 80009d0:	4611      	mov	r1, r2
 80009d2:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <GPIO_IRQConfig+0xfc>)
 80009d4:	430b      	orrs	r3, r1
 80009d6:	6013      	str	r3, [r2, #0]
}
 80009d8:	e033      	b.n	8000a42 <GPIO_IRQConfig+0xe6>
		if(IRQNumber <= 31)
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b1f      	cmp	r3, #31
 80009de:	d80a      	bhi.n	80009f6 <GPIO_IRQConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80009e0:	4b1e      	ldr	r3, [pc, #120]	; (8000a5c <GPIO_IRQConfig+0x100>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	79fa      	ldrb	r2, [r7, #7]
 80009e6:	2101      	movs	r1, #1
 80009e8:	fa01 f202 	lsl.w	r2, r1, r2
 80009ec:	4611      	mov	r1, r2
 80009ee:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <GPIO_IRQConfig+0x100>)
 80009f0:	430b      	orrs	r3, r1
 80009f2:	6013      	str	r3, [r2, #0]
}
 80009f4:	e025      	b.n	8000a42 <GPIO_IRQConfig+0xe6>
		else if((IRQNumber >= 32) && (IRQNumber < 64))
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b1f      	cmp	r3, #31
 80009fa:	d90f      	bls.n	8000a1c <GPIO_IRQConfig+0xc0>
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000a00:	d80c      	bhi.n	8000a1c <GPIO_IRQConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000a02:	4b17      	ldr	r3, [pc, #92]	; (8000a60 <GPIO_IRQConfig+0x104>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	79fa      	ldrb	r2, [r7, #7]
 8000a08:	f002 021f 	and.w	r2, r2, #31
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a12:	4611      	mov	r1, r2
 8000a14:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <GPIO_IRQConfig+0x104>)
 8000a16:	430b      	orrs	r3, r1
 8000a18:	6013      	str	r3, [r2, #0]
 8000a1a:	e012      	b.n	8000a42 <GPIO_IRQConfig+0xe6>
		else if((IRQNumber >= 64) && (IRQNumber < 96))
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	2b3f      	cmp	r3, #63	; 0x3f
 8000a20:	d90f      	bls.n	8000a42 <GPIO_IRQConfig+0xe6>
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b5f      	cmp	r3, #95	; 0x5f
 8000a26:	d80c      	bhi.n	8000a42 <GPIO_IRQConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <GPIO_IRQConfig+0x108>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	79fa      	ldrb	r2, [r7, #7]
 8000a2e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a32:	2101      	movs	r1, #1
 8000a34:	fa01 f202 	lsl.w	r2, r1, r2
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <GPIO_IRQConfig+0x108>)
 8000a3c:	430b      	orrs	r3, r1
 8000a3e:	6013      	str	r3, [r2, #0]
}
 8000a40:	e7ff      	b.n	8000a42 <GPIO_IRQConfig+0xe6>
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	e000e100 	.word	0xe000e100
 8000a54:	e000e104 	.word	0xe000e104
 8000a58:	e000e108 	.word	0xe000e108
 8000a5c:	e000e180 	.word	0xe000e180
 8000a60:	e000e184 	.word	0xe000e184
 8000a64:	e000e188 	.word	0xe000e188

08000a68 <GPIO_IRQPriorityConfig>:
 *
 * 	@note	:	none
 * 	@date	:	07/21/23
 **********************************************************************/
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	6039      	str	r1, [r7, #0]
 8000a72:	71fb      	strb	r3, [r7, #7]
	/* find the register */
	uint8_t temp1 = (IRQNumber / 4);
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	73fb      	strb	r3, [r7, #15]
	/* find the required byte in register */
	uint8_t temp2 = (IRQNumber % 4) * 8;
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f003 0303 	and.w	r3, r3, #3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	73bb      	strb	r3, [r7, #14]

	/* each 32 bit includes 4 irq priority settings divided by bytes */
	/* first 4 bits of those bytes are n/a, so we shift 4 more bits  */
	*(NVIC_PR_BASE_ADDR + temp1) |= (IRQPriority << (temp2 + 4));
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000a8e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000a92:	6819      	ldr	r1, [r3, #0]
 8000a94:	7bbb      	ldrb	r3, [r7, #14]
 8000a96:	3304      	adds	r3, #4
 8000a98:	683a      	ldr	r2, [r7, #0]
 8000a9a:	409a      	lsls	r2, r3
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000aa4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	601a      	str	r2, [r3, #0]

	/* REG1 ||IRQ7||IRQ6||IRQ5||IRQ4|| */
	/* REG0 ||IRQ3||IRQ2||IRQ1||IRQ0|| */
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <GPIO_IRQHandling>:
 *
 * 	@note	:	none
 * 	@date	:	07/19/23
 **********************************************************************/
void GPIO_IRQHandling(uint8_t PinNumber)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
	/* clear the exti pr register for the given pin number */
	if(EXTI->PR & (1 << PinNumber))
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <GPIO_IRQHandling+0x3c>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	79fa      	ldrb	r2, [r7, #7]
 8000ac8:	2101      	movs	r1, #1
 8000aca:	fa01 f202 	lsl.w	r2, r1, r2
 8000ace:	4013      	ands	r3, r2
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d009      	beq.n	8000ae8 <GPIO_IRQHandling+0x30>
	{
		EXTI->PR |= (1 << PinNumber);
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <GPIO_IRQHandling+0x3c>)
 8000ad6:	695b      	ldr	r3, [r3, #20]
 8000ad8:	79fa      	ldrb	r2, [r7, #7]
 8000ada:	2101      	movs	r1, #1
 8000adc:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4a04      	ldr	r2, [pc, #16]	; (8000af4 <GPIO_IRQHandling+0x3c>)
 8000ae4:	430b      	orrs	r3, r1
 8000ae6:	6153      	str	r3, [r2, #20]
	}
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	40013c00 	.word	0x40013c00

08000af8 <SPI_PeriClockControl>:
 *
 * 	@note	:	none
 * 	@date	:	07/23/23
 **********************************************************************/
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	70fb      	strb	r3, [r7, #3]
	if(EnorDi)
 8000b04:	78fb      	ldrb	r3, [r7, #3]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d02b      	beq.n	8000b62 <SPI_PeriClockControl+0x6a>
	{
		if(pSPIx == SPI1)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a2d      	ldr	r2, [pc, #180]	; (8000bc4 <SPI_PeriClockControl+0xcc>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d106      	bne.n	8000b20 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000b12:	4b2d      	ldr	r3, [pc, #180]	; (8000bc8 <SPI_PeriClockControl+0xd0>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	4a2c      	ldr	r2, [pc, #176]	; (8000bc8 <SPI_PeriClockControl+0xd0>)
 8000b18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b1c:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pSPIx == SPI4)
		{
			SPI4_PCLK_DI();
		}
	}
}
 8000b1e:	e04b      	b.n	8000bb8 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a2a      	ldr	r2, [pc, #168]	; (8000bcc <SPI_PeriClockControl+0xd4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d106      	bne.n	8000b36 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000b28:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <SPI_PeriClockControl+0xd0>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	4a26      	ldr	r2, [pc, #152]	; (8000bc8 <SPI_PeriClockControl+0xd0>)
 8000b2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b32:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b34:	e040      	b.n	8000bb8 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a25      	ldr	r2, [pc, #148]	; (8000bd0 <SPI_PeriClockControl+0xd8>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d106      	bne.n	8000b4c <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 8000b3e:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <SPI_PeriClockControl+0xd0>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	4a21      	ldr	r2, [pc, #132]	; (8000bc8 <SPI_PeriClockControl+0xd0>)
 8000b44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b48:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b4a:	e035      	b.n	8000bb8 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a21      	ldr	r2, [pc, #132]	; (8000bd4 <SPI_PeriClockControl+0xdc>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d131      	bne.n	8000bb8 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 8000b54:	4b1c      	ldr	r3, [pc, #112]	; (8000bc8 <SPI_PeriClockControl+0xd0>)
 8000b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b58:	4a1b      	ldr	r2, [pc, #108]	; (8000bc8 <SPI_PeriClockControl+0xd0>)
 8000b5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b5e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b60:	e02a      	b.n	8000bb8 <SPI_PeriClockControl+0xc0>
		if(pSPIx == SPI1)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <SPI_PeriClockControl+0xcc>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d106      	bne.n	8000b78 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <SPI_PeriClockControl+0xd0>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a16      	ldr	r2, [pc, #88]	; (8000bc8 <SPI_PeriClockControl+0xd0>)
 8000b70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b76:	e01f      	b.n	8000bb8 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI2)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <SPI_PeriClockControl+0xd4>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d106      	bne.n	8000b8e <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <SPI_PeriClockControl+0xd0>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	4a10      	ldr	r2, [pc, #64]	; (8000bc8 <SPI_PeriClockControl+0xd0>)
 8000b86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b8a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b8c:	e014      	b.n	8000bb8 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI3)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a0f      	ldr	r2, [pc, #60]	; (8000bd0 <SPI_PeriClockControl+0xd8>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d106      	bne.n	8000ba4 <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <SPI_PeriClockControl+0xd0>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <SPI_PeriClockControl+0xd0>)
 8000b9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ba0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ba2:	e009      	b.n	8000bb8 <SPI_PeriClockControl+0xc0>
		else if(pSPIx == SPI4)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <SPI_PeriClockControl+0xdc>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d105      	bne.n	8000bb8 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <SPI_PeriClockControl+0xd0>)
 8000bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb0:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <SPI_PeriClockControl+0xd0>)
 8000bb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000bb6:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	40013000 	.word	0x40013000
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	40003800 	.word	0x40003800
 8000bd0:	40003c00 	.word	0x40003c00
 8000bd4:	40013400 	.word	0x40013400

08000bd8 <SPI_Init>:
 *
 * 	@note	:	none
 * 	@date	:	07/24/23
 **********************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]

	/* Enable peripheral clock */
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2101      	movs	r1, #1
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff84 	bl	8000af8 <SPI_PeriClockControl>

	/* 1. configure the SPI_CR1 register */


	temp |= (pSPIHandle->SPI_Config.SPI_BusConfig << SPI_CR1_MSTR);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	795b      	ldrb	r3, [r3, #5]
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]

	if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CFG_FD)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	795b      	ldrb	r3, [r3, #5]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d104      	bne.n	8000c10 <SPI_Init+0x38>
	{
		/* bidi mode should be cleared */
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	e014      	b.n	8000c3a <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CFG_HD)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	795b      	ldrb	r3, [r3, #5]
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d104      	bne.n	8000c22 <SPI_Init+0x4a>
	{
		/* bidi mode should be set */
		temp |= (1 << SPI_CR1_BIDIMODE);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	e00b      	b.n	8000c3a <SPI_Init+0x62>
	}
	else if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CFG_SIMPLEX_RXONLY)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	795b      	ldrb	r3, [r3, #5]
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	d107      	bne.n	8000c3a <SPI_Init+0x62>
	{
		/* bidi mode should be cleared */
		temp &= ~(1 << SPI_CR1_BIDIMODE);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c30:	60fb      	str	r3, [r7, #12]
		/* rxonly bit should be set */
		temp |= (1 << SPI_CR1_RXONLY);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c38:	60fb      	str	r3, [r7, #12]
	}

	temp |= (pSPIHandle->SPI_Config.SPI_SclkSpeed << SPI_CR1_BR);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	799b      	ldrb	r3, [r3, #6]
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	461a      	mov	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]

	temp |= (pSPIHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	79db      	ldrb	r3, [r3, #7]
 8000c4c:	02db      	lsls	r3, r3, #11
 8000c4e:	461a      	mov	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]

	temp |= (pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	7a1b      	ldrb	r3, [r3, #8]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	4313      	orrs	r3, r2
 8000c62:	60fb      	str	r3, [r7, #12]

	temp |= (pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	7a5b      	ldrb	r3, [r3, #9]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	60fb      	str	r3, [r7, #12]

	temp |= (pSPIHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	7a9b      	ldrb	r3, [r3, #10]
 8000c74:	025b      	lsls	r3, r3, #9
 8000c76:	461a      	mov	r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	60fb      	str	r3, [r7, #12]

	temp |= (pSPIHandle->SPI_Config.SPI_SSI << SPI_CR1_SSI);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	7adb      	ldrb	r3, [r3, #11]
 8000c82:	021b      	lsls	r3, r3, #8
 8000c84:	461a      	mov	r2, r3
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = temp;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	68fa      	ldr	r2, [r7, #12]
 8000c92:	601a      	str	r2, [r3, #0]

	temp = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]

	temp |= (pSPIHandle->SPI_Config.SPI_SSOE << SPI_CR2_SSOE);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7b1b      	ldrb	r3, [r3, #12]
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR2 = temp;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	605a      	str	r2, [r3, #4]

}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <SPI_SendData>:
 *
 * 	@note	:	This is a blocking call
 * 	@date	:	07/24/23
 **********************************************************************/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b085      	sub	sp, #20
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	60f8      	str	r0, [r7, #12]
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000cc2:	e023      	b.n	8000d0c <SPI_SendData+0x56>
	{
		/* wait(block) untill tx buffer become empty */
		while(!(pSPIx->SR & (1 << SPI_SR_TXE)));
 8000cc4:	bf00      	nop
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d0f9      	beq.n	8000cc6 <SPI_SendData+0x10>

		if(pSPIx->CR1 & (1 << SPI_CR1_DFF))
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d00b      	beq.n	8000cf6 <SPI_SendData+0x40>
		{
			/* 16 bit frame format */
			pSPIx->DR = *(uint16_t*)pTxBuffer;
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	60da      	str	r2, [r3, #12]
			(uint16_t*)pTxBuffer++;
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	3301      	adds	r3, #1
 8000cec:	60bb      	str	r3, [r7, #8]
			Len--;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	e007      	b.n	8000d06 <SPI_SendData+0x50>
		}
		else
		{
			/* 8 bit frame format */
			pSPIx->DR = *pTxBuffer;
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	60da      	str	r2, [r3, #12]
			pTxBuffer++;
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	3301      	adds	r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
		}
		Len--;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1d8      	bne.n	8000cc4 <SPI_SendData+0xe>
	}
}
 8000d12:	bf00      	nop
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <SPI_ReceiveData>:
 *
 * 	@note	:	none
 * 	@date	:	07/24/23
 **********************************************************************/
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000d2c:	e023      	b.n	8000d76 <SPI_ReceiveData+0x56>
	{
		/* wait(block) untill rx buffer become loaded */
		while(!(pSPIx->SR & (1 << SPI_SR_RXNE)));
 8000d2e:	bf00      	nop
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	689b      	ldr	r3, [r3, #8]
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0f9      	beq.n	8000d30 <SPI_ReceiveData+0x10>

		if(pSPIx->CR1 & (1 << SPI_CR1_DFF))
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d00b      	beq.n	8000d60 <SPI_ReceiveData+0x40>
		{
			/* 16 bit frame format */
			*(uint16_t*)pRxBuffer = pSPIx->DR;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	801a      	strh	r2, [r3, #0]
			(uint16_t*)pRxBuffer++;
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	3301      	adds	r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
			Len--;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	e007      	b.n	8000d70 <SPI_ReceiveData+0x50>
		}
		else
		{
			/* 8 bit frame format */
			*pRxBuffer = pSPIx->DR;
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	701a      	strb	r2, [r3, #0]
			pRxBuffer++;
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
		}
		Len--;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d1d8      	bne.n	8000d2e <SPI_ReceiveData+0xe>
	}
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <SPI_PeripheralControl>:
 *
 * 	@note	:	none
 * 	@date	:	08/10/23
 **********************************************************************/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	460b      	mov	r3, r1
 8000d94:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000d96:	78fb      	ldrb	r3, [r7, #3]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d106      	bne.n	8000daa <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000da8:	e005      	b.n	8000db6 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	601a      	str	r2, [r3, #0]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <SPI_GetFlagStatus>:
 *
 * 	@note	:	none
 * 	@date	:	08/11/23
 **********************************************************************/
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	6039      	str	r1, [r7, #0]
	if(pSPIx->CR2 & 1 << FlagName)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	683a      	ldr	r2, [r7, #0]
 8000dd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd8:	4013      	ands	r3, r2
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <SPI_GetFlagStatus+0x20>
	{
		return SET;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e000      	b.n	8000de4 <SPI_GetFlagStatus+0x22>
	}
	return RESET;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <__libc_init_array>:
 8000df0:	b570      	push	{r4, r5, r6, lr}
 8000df2:	4d0d      	ldr	r5, [pc, #52]	; (8000e28 <__libc_init_array+0x38>)
 8000df4:	4c0d      	ldr	r4, [pc, #52]	; (8000e2c <__libc_init_array+0x3c>)
 8000df6:	1b64      	subs	r4, r4, r5
 8000df8:	10a4      	asrs	r4, r4, #2
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	42a6      	cmp	r6, r4
 8000dfe:	d109      	bne.n	8000e14 <__libc_init_array+0x24>
 8000e00:	4d0b      	ldr	r5, [pc, #44]	; (8000e30 <__libc_init_array+0x40>)
 8000e02:	4c0c      	ldr	r4, [pc, #48]	; (8000e34 <__libc_init_array+0x44>)
 8000e04:	f000 f818 	bl	8000e38 <_init>
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	10a4      	asrs	r4, r4, #2
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	42a6      	cmp	r6, r4
 8000e10:	d105      	bne.n	8000e1e <__libc_init_array+0x2e>
 8000e12:	bd70      	pop	{r4, r5, r6, pc}
 8000e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e18:	4798      	blx	r3
 8000e1a:	3601      	adds	r6, #1
 8000e1c:	e7ee      	b.n	8000dfc <__libc_init_array+0xc>
 8000e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e22:	4798      	blx	r3
 8000e24:	3601      	adds	r6, #1
 8000e26:	e7f2      	b.n	8000e0e <__libc_init_array+0x1e>
 8000e28:	08000e50 	.word	0x08000e50
 8000e2c:	08000e50 	.word	0x08000e50
 8000e30:	08000e50 	.word	0x08000e50
 8000e34:	08000e54 	.word	0x08000e54

08000e38 <_init>:
 8000e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e3a:	bf00      	nop
 8000e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e3e:	bc08      	pop	{r3}
 8000e40:	469e      	mov	lr, r3
 8000e42:	4770      	bx	lr

08000e44 <_fini>:
 8000e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e46:	bf00      	nop
 8000e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e4a:	bc08      	pop	{r3}
 8000e4c:	469e      	mov	lr, r3
 8000e4e:	4770      	bx	lr
